pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    DOCKER_REGISTRY_CREDENTIALS = credentials('docker-cred')
    GITHUB_TOKEN_VAR = credentials('github') // token stored in Jenkins
  }

  stages {

    stage('Checkout') {
      steps {
        echo 'Starting checkout...'
        // If you want to checkout the repo, uncomment and modify below
        // git branch: 'master', url: 'https://github.com/Lavanyags11/jenkins-cicd.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    /*
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://<SONAR_HOST>:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    */

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "lavanyags88/jenkins-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "cicd-manifest"
        GIT_USER_NAME = "Lavanyags11"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "lavanya@gmail.com"
            git config user.name "lavanya"

            # Fetch and reset local master to remote master
            git fetch origin master
            git checkout -B master origin/master
            git reset --hard origin/master

            # Update deployment file with new build number
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"

            # Force push to master safely
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} master --force
          '''
        }
      }
    }

  }
}
